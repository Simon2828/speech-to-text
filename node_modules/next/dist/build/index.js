"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const nanoid_1 = __importDefault(require("nanoid"));
const next_config_1 = __importDefault(require("next-server/next-config"));
const constants_1 = require("next-server/constants");
const webpack_config_1 = __importDefault(require("./webpack-config"));
const generate_build_id_1 = require("./generate-build-id");
const write_build_id_1 = require("./write-build-id");
const is_writeable_1 = require("./is-writeable");
const compiler_1 = require("./compiler");
async function build(dir, conf = null, lambdas = false) {
    if (!await is_writeable_1.isWriteable(dir)) {
        throw new Error('> Build directory is not writeable. https://err.sh/zeit/next.js/build-dir-not-writeable');
    }
    const config = next_config_1.default(constants_1.PHASE_PRODUCTION_BUILD, dir, conf);
    const lambdasOption = config.lambdas ? config.lambdas : lambdas;
    const distDir = path_1.join(dir, config.distDir);
    const buildId = await generate_build_id_1.generateBuildId(config.generateBuildId, nanoid_1.default);
    const configs = await Promise.all([
        webpack_config_1.default(dir, { buildId, isServer: false, config, lambdas: lambdasOption }),
        webpack_config_1.default(dir, { buildId, isServer: true, config, lambdas: lambdasOption })
    ]);
    let result = { warnings: [], errors: [] };
    if (lambdasOption) {
        const clientResult = await compiler_1.runCompiler([configs[0]]);
        const serverResult = await compiler_1.runCompiler([configs[1]]);
        result = { warnings: [...clientResult.warnings, ...serverResult.warnings], errors: [...clientResult.errors, ...serverResult.errors] };
    }
    else {
        result = await compiler_1.runCompiler(configs);
    }
    if (result.warnings.length > 0) {
        console.warn('> Emitted warnings from webpack');
        console.warn(...result.warnings);
    }
    if (result.errors.length > 0) {
        console.error(...result.errors);
        throw new Error('> Build failed because of webpack errors');
    }
    await write_build_id_1.writeBuildId(distDir, buildId);
}
exports.default = build;
